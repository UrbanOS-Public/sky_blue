 "source(output(",
 "          exceededTransferLimit as boolean,",
 "          features as (attributes as (AADT_MAJOR as integer, AADT_MAJOR_ROADWAY_ID as string, AADT_MINOR as integer, AADT_MINOR_ROADWAY_ID as string, COMPLEX_INTERSECTION_IND as boolean, CRASH_INTERSECT_CATEGORY_SN as string, DOT_CNTY_CD as short, DOT_GEOG_DIST_CD as short, EV_DAILY_TRAFFIC as integer, EXTRACT_DATE as long, EXT_NUM_SEG as short, GEOMETRY_TYPE as boolean, GEOMETRY_TYPE_ID as short, INTERCHANGE_IND as string, INTERSECTING_ROADWAYID_MPS as string, INTERSECTING_ROAD_NAMES as string, INTERSECTION_KEY as integer, INTERSECTION_MIN_NODE_ID as integer, INTERSECTION_TYPE_ID as string, INT_NUM_SEG as short, MAP_SOURCE as string, MAX_LANES_NO as short, NUM_LEG_ID as short, OBJECTID as integer, ON_OFF_SYSTEM_IND as string, OTHER_SIGN_IND as string, PXID as integer, SIGNALIZED_IND as boolean, STOP_CONTROL_IND as boolean, TOT_NUM_LEG as short, TOT_NUM_NODES as short, TOT_NUM_SEG as short, URBAN_IND as boolean, USPS_CITY_PRIMARY_ID as short, X_UTM as double, YIELD_CONTROL_IND as boolean, Y_UTM as double), geometry as (paths as double[][][]))[],",
 "          fields as (alias as string, length as short, name as string, type as string)[],",
 "          geometryType as string,",
 "          globalIdFieldName as string,",
 "          objectIdFieldName as string,",
 "          spatialReference as (latestWkid as short, wkid as short)",
 "     ),",
 "     allowSchemaDrift: false,",
 "     validateSchema: true,",
 "     limit: 500,",
 "     ignoreNoFilesFound: false,",
 "     documentForm: 'documentPerLine') ~> source1",
 "source1 foldDown(unroll(features),",
 "     mapColumn(",
 "          features",
 "     ),",
 "     skipDuplicateMapInputs: false,",
 "     skipDuplicateMapOutputs: false) ~> flatten1",
 "flatten1 foldDown(unroll(features.geometry.paths),",
 "     mapColumn(",
 "          OBJECTID = features.attributes.OBJECTID,",
 "          paths = features.geometry.paths",
 "     ),",
 "     skipDuplicateMapInputs: false,",
 "     skipDuplicateMapOutputs: false) ~> flatten2",
 "flatten2 foldDown(unroll(paths, paths),",
 "     mapColumn(",
 "          OBJECTID,",
 "          paths = paths",
 "     ),",
 "     skipDuplicateMapInputs: false,",
 "     skipDuplicateMapOutputs: false) ~> flatten3",
 "flatten3 sink(allowSchemaDrift: true,",
 "     validateSchema: false,",
 "     umask: 0022,",
 "     preCommands: [],",
 "     postCommands: [],",
 "     skipDuplicateMapInputs: true,",
 "     skipDuplicateMapOutputs: true,",
 "     mapColumn(",
 "          OBJECTID,",
 "          paths",
 "     )) ~> sink1"
       